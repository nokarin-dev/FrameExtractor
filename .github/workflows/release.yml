name: Build & Release Executable

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Build & Release for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install pyinstaller

      - name: Build executable (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          pyinstaller --onefile --name fe FrameExtractor.py --exclude-module libcrypto.so.3 --exclude-module libssl.so.3

      - name: Build executable (Linux/macOS)
        if: runner.os != 'Windows'
        run: pyinstaller --onefile --name fe FrameExtractor.py --exclude-module libcrypto.so.3 --exclude-module libssl.so.3

      - name: Archive executable
        run: |
          mkdir -p release
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cp dist/fe release/fe-linux
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            cp dist/fe release/fe-macos
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp dist/fe release/fe-windows
          fi

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe-${{ matrix.os }}
          path: release/

  publish:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Changelog (Conventional Commits)
        id: changelog
        run: |
          LAST_TAG=$(git tag --sort=-creatordate | head -n 1)
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tag found."
            git log --pretty=format:"%s" > raw_log.txt
          else
            git log "$LAST_TAG"..HEAD --pretty=format:"%s" > raw_log.txt
          fi

          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "### Changelog for ${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo >> $GITHUB_OUTPUT

          grep '^feat' raw_log.txt | sed 's/^/- /' >> $GITHUB_OUTPUT || true
          grep '^fix' raw_log.txt | sed 's/^/- /' >> $GITHUB_OUTPUT || true
          grep -vE '^(feat|fix)' raw_log.txt | sed 's/^/- /' >> $GITHUB_OUTPUT || true

          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
